name: Build

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on: 
  push:
    branches:
      - docker-container

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    outputs:
      image_name: "${{ steps.meta.outputs.tags }}@${{ steps.build_push_action.outputs.digest }}"
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build_push_action
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  scan:
      runs-on: ubuntu-latest
      needs: build-and-push-image
      steps:
        - uses: actions/checkout@v3
        - name: Scan image
          id: scan
          uses: anchore/scan-action@v3.3.2
          with:
            fail-build: false
            image: ${{needs.build-and-push-image.outputs.image_name}}
        - name: upload Anchore scan SARIF report
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: ${{ steps.scan.outputs.sarif }}

  deploy:
    runs-on: ubuntu-latest
    needs: scan
  
    steps:
      - uses: actions/checkout@v3
        env:
          CG_USERNAME: ${{ secrets.CG_USERNAME }}
        if: ${{ env.CG_USERNAME }}
      - name: Deploy to cloud.gov
        uses: cloud-gov/cg-cli-tools@main
        env:
          CG_USERNAME: ${{ secrets.CG_USERNAME }}
        if: ${{ env.CG_USERNAME }}
        with: 
          cf_username: ${{ secrets.CG_USERNAME }}
          cf_password: ${{ secrets.CG_PASSWORD }}
          cf_org: ${{ secrets.CF_ORG }}
          cf_space: ${{ secrets.CF_SPACE }}
          command: cf delete Heat_CVD_UHI_Dashboard -f ; cf push -f manifest.yml

